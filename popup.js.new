// Gmail API configuration
const CLIENT_ID = "512491148969-mkej3cctpprn0d4gabvc3tv48iaba9ae.apps.googleusercontent.com";
const SCOPES = "https://www.googleapis.com/auth/gmail.readonly";
let tokenClient;
let gapiInited = false;

// Initialize everything when popup loads
document.addEventListener('DOMContentLoaded', async function() {
    initializeLoginForm();
    await initializeGmail();
});

// Original login form functionality
function initializeLoginForm() {
    const form = document.getElementById('loginForm');
    const status = document.getElementById('status');
    
    // Load saved credentials when popup opens
    chrome.storage.local.get(['dgistUser', 'dgistPass'], function(data) {
        if (data.dgistUser) document.getElementById('username').value = data.dgistUser;
        if (data.dgistPass) document.getElementById('password').value = data.dgistPass;
    });

    // Handle form submission
    form.onsubmit = function(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        
        if (!username || !password) {
            status.textContent = "Please enter both username and password";
            status.className = "error";
            return;
        }

        // Save credentials
        chrome.storage.local.set(
            { 
                dgistUser: username, 
                dgistPass: password 
            }, 
            function() {
                status.textContent = "✓ Credentials saved successfully!";
                status.className = "";
                
                // Animate the status message
                status.style.opacity = "0";
                status.style.transform = "translateY(10px)";
                setTimeout(() => {
                    status.style.transition = "all 0.3s ease";
                    status.style.opacity = "1";
                    status.style.transform = "translateY(0)";
                }, 50);
            }
        );
    };
}

// Gmail integration functionality
async function initializeGmail() {
    await initGapi();
    initTokenClient();

    document.getElementById("connectBtn").addEventListener("click", connectGmail);

    // Check if token exists and is valid
    chrome.storage.local.get(["gmail_token"], async (res) => {
        if (res.gmail_token && res.gmail_token.access_token && res.gmail_token.expiry > Date.now()) {
            document.getElementById("connectBtn").textContent = "Connected ✅";
            document.getElementById("connectBtn").disabled = true;
            await listMessages();
        }
    });
}

function initGapi() {
    return new Promise((resolve) => {
        gapi.load("client", async () => {
            await gapi.client.init({
                discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest"],
            });
            gapiInited = true;
            resolve();
        });
    });
}

function initTokenClient() {
    tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: SCOPES,
        callback: async (resp) => {
            if (resp.error) return;
            await saveToken(resp);
            document.getElementById("connectBtn").textContent = "Connected ✅";
            document.getElementById("connectBtn").disabled = true;
            await listMessages();
        },
    });
}

function connectGmail() {
    tokenClient.requestAccessToken({ prompt: "consent" });
}

async function saveToken(resp) {
    const expiry = Date.now() + (resp.expires_in * 1000);
    const tokenData = { access_token: resp.access_token, expiry: expiry };
    chrome.storage.local.set({ gmail_token: tokenData });
    gapi.client.setToken(tokenData);
}

async function listMessages() {
    try {
        const res = await gapi.client.gmail.users.messages.list({
            userId: "me",
            q: "from:no-reply@dgist.ac.kr",
            maxResults: 10
        });

        const messages = res.result.messages || [];
        const list = document.getElementById("codes");
        list.innerHTML = "";

        for (let msg of messages.slice(0, 6)) { // Only process last 6 messages
            const msgDetail = await gapi.client.gmail.users.messages.get({
                userId: "me",
                id: msg.id
            });

            let bodyData = "";
            if (msgDetail.result.payload.parts) {
                bodyData = msgDetail.result.payload.parts[0].body.data;
            } else {
                bodyData = msgDetail.result.payload.body.data;
            }

            const decoded = atob(bodyData.replace(/-/g, "+").replace(/_/g, "/"));
            const match = decoded.match(/\b\d{6}\b/);
            if (match) {
                const code = match[0];
                const date = new Date(parseInt(msgDetail.result.internalDate));
                const formattedDate = date.toLocaleString();

                const li = document.createElement("li");
                li.textContent = `${code} (${formattedDate})`;
                list.appendChild(li);
            }
        }
    } catch (error) {
        console.error('Error fetching messages:', error);
    }
}
